# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
      PORT: 3030
      DB_HOSTNAME: dictionary_db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOSTNAME: "redis-stack"
      REDIS_PORT: ${REDIS_PORT}
    ports:
      - 3031:3030
    networks:
      - backend-api-network
    restart: always
    depends_on:
      - dictionary_db
      - redis-stack

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker-compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  #   db:
  #     image: postgres
  #     restart: always
  #     user: postgres
  #     secrets:
  #       - db-password
  #     volumes:
  #       - db-data:/var/lib/postgresql/data
  #     environment:
  #       - POSTGRES_DB=example
  #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
  #     expose:
  #       - 5432
  #     healthcheck:
  #       test: [ "CMD", "pg_isready" ]
  #       interval: 10s
  #       timeout: 5s
  #       retries: 5
  # volumes:
  #   db-data:
  # secrets:
  #   db-password:
  #     file: db/password.txt

  dictionary_db:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_RANDOM_ROOT_PASSWORD: true
    expose:
      - ${DB_PORT}
    volumes:
      - dictionary-db-vol:/var/lib/mysql
      - ./data/arabic_dictionaries.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    networks:
      - backend-api-network

  redis-stack:
    image: redis/redis-stack:latest
    ports:
      - 8001:8001
    networks:
      - backend-api-network
    # environment:
    #   - REDDIS_PASSWORD=password

volumes:
  dictionary-db-vol:

networks:
  backend-api-network:
